{
    "collab_server" : "",
    "contents" : "# CepespR -----------------------------------------------------------------\n\n# O CepespR é um pacote criado para auxiliar o acesso dos usuários a API do CepespData. Por meio\n# deste pacote é possível ter um acesso mais rápido e organizado aos dados do TSE a respeito das eleições\n# ocorridas no Brasil entres os anos de 1998 e 2016.\n\n# Pensando nisto, este script tem como seu objetivo principal mostrar exemplos de como o pacote CepespR funciona e,\n# assim, facilitar a vida dos usuários na hora de utilizar o R. Seguindo a rotina de cógidos abaixo, o usuário ao final \n# deste script terá as consultas realizadas salvas com sucesso em formato compatível com o excel(.csv).\n\n\n# 1. Instalando o CepespR -------------------------------------------------\n\n# Para instalar o pacote CepespR é preciso rodar o código abaixo apenas \n# uma vez (apenas em caso de troca de computador é preciso instalar novamente o pacote):\n\n\nif (!require(\"devtools\")) install.packages(\"devtools\")\ndevtools::install_github(\"Cepesp-Fgv/cepesp-r\") \n\n# Uma vez instalado o CepespR, é preciso \"ativar\" a library toda vez.\n# Por isso SEMPRE que for utilizar o CepespData, é necessário rodar o código abaixo:\n\nlibrary(cepespR)\n\n\n# 2. Explorando as funções do CepespR -------------------------------------\n\n# Uma vez carregado o pacote do CepespR, o usuário poderá fazer uso de 7 tipos de funções: \n# get_candidates, get_coalitions, get_votes, get_elections, get_assets, get_secretaries e get_filiates. Cada função mostra\n# ao usuário diferentes partes dos dados do TSE, retornando sempre ao final da consulta\n# uma tabela com os detalhes das eleições. Veja abaixo o que cada função faz:\n\n\n## 2.1. Consultar perfil dos candidatos -----------------------------------\n\n# Para obter detalhes a respeito das características individuais dos candidatos que \n# concorreram em uma eleição específica, a função get_candidates é a indicada:\n\n# A função funciona assim:\n# base_de_dados<-get_candidates(year= \"Ano escolhido\", position = \"cargo escolhido\"). \n# Como no exemplo abaixo:\n\ncandpres_14 <- get_candidates(year=2014, position=\"Presidente\")\n\n# Para visualizar os dados do data frame criado usamos a função VIEW\n\nView(candpres_14)\n\n# A ordem da função é sempre esta: nome do data frame onde você quer salvar estas \n# informações + nome da função + variáveis de interesse\n\n# Também é possível realizar as consultas indicando os códigos dos cargos.\n# Para visualizar quais códigos representam cada cargo, por favor, acesse: \n# https://github.com/Cepesp-Fgv/cepesp-rest/blob/master/EleicoesPorCargo_BETA.md\n# Vamos fazer uma consulta usando o código do cargo:\n\n# Suponhamos que estamos interessados nas eleições para prefeito ocorridas em 2012. Neste caso, \n# é preciso mudar apenas os valores dos parâmetros da função. Veja:\n\ncandpref_12 <- get_candidates(year=2012, position=11)\n# Você também poderia ter escrito \"Prefeito\" no lugar do código 11, que o resultado seria o mesmo.\n# Note que apenas o ano e o nome(código) do cargo foram alterados\n\nView(candpref_12)\n\n\n## 2.2. Consultar Coligações ----------------------------------------------\n\n# Para obter detalhes a respeito dos partidos que compuseram as coligacões em \n# uma eleição específica, a função get_coalitions é a indicada:\n\n# Ela funciona de forma similar a get_candidates:\n\ncolpres_14 <- get_coalitions(year=2014, position=\"Presidente\")\nView(colpres_14)\n\n# Suponhamos que agora estamos interessados nas coligações da eleição para \n# presidente em 2002. Neste caso, a função será escrita assim:\n\ncolpres_02 <- get_coalitions(year=2002, position=\"Presidente\")\nView(colpres_02)\n\n\n## 2.3. Consultar votos por eleição ---------------------------------------\n\n# Para obter detalhes a respeito do número de votos de cada candidato em uma \n# eleição específica, a função get_votos é a indicada:\n\nvtpres_14_mun <- get_votes(year=2014, position=\"Presidente\", regional_aggregation=\"Municipio\")\nView(vtpres_14_mun)\n\n# Diferente das funções anteriores, essa função precisa de uma AGREGAÇÃO REGIONAL. \n# Ou seja, você pode escolher a que nível de detalhe você quer ver os dados, se é por seção, municipio, nacional, etc. \n# Os diferentes níveis de agregação disponíveis podem ser consultados \n# em: https://github.com/Cepesp-Fgv/cepesp-r\n\n# E se estivéssemos interessados em ver a agregação por Estado (unidade da federação)?\n\nvtpres_14_estad <-get_votes(year=2014, position=\"Presidente\", regional_aggregation=\"Estado\")\nView(vtpres_14_estad)\n\n\n## 2.4. Consultar resultado de eleições por cargo -------------------------\n\n# Além das consultas disponíveis no TSE, é possível fazer uma consulta integrada as eleições.\n# Esta consulta agrega informações de candidato, coligações e votos. \n# A consulta ainda está em fase BETA e podem haver pontos de melhoria.\n\n# Para obter detalhes a respeito de uma eleição especificando-se o cargo, \n# use a função get_elections:\n\nelpres_14 <- get_elections(year=2014, position=\"Presidente\", regional_aggregation=\"Municipio\", political_aggregation=\"Candidato\")\nView(elpres_14)\n\n# Esta função permite também consultar o resultado por diferentes agregações: \n# Candidato, Partido, Coligação e Consolidado\n\n# Em resultado consolidado da eleição você pode encontrar dados de comparecimento, votos válidos\n# e votos brancos e nulos. Veja:\n\nelpres_14_2 <- get_elections(year=2014, position=\"Presidente\", regional_aggregation=\"Estado\", political_aggregation=\"Consolidado\")\nView(elpres_14_2)\n\n# Caso você queira restringir sua busca, é possível filtrar na consulta valores específicos.\n# Para limitar os resultados a valores específicos (um estado, um partido ou a um candidato, por exemplo), \n# basta acrescentar os parâmetros STATE, PARTY ou CANDIDATE_NUMBER e alterá-los de acordo com o interesse\n\n# Para mostrar apenas os resultados do Rio Grande do Sul, por exemplo, acrescente o parâmetro STATE\n\nelpres_14_RS <- get_elections(year=2014, position=\"Presidente\", regional_aggregation=\"Estado\", political_aggregation=\"Partido\", state=\"RS\")\nView(elpres_14_RS)\n\n# Para mostrar apenas os resultados referentes ao PT, por exemplo, acrescente o parâmetro PARTY\n\nelpres_14_PT <- get_elections(year=2014, position=\"Presidente\", regional_aggregation=\"Estado\", political_aggregation=\"Partido\", party=\"13\")\nView(elpres_14_PT)\n\n# Para mostrar apenas os resultados referentes ao candidato 2511, por exemplo, acrescente o parâmetro CANDIDATE_NUMBER\n# Vamos escrever os parâmetros usando os códigos. Para o cargo de deputado federal o código é 6, para a agregação por UF\n# o código é 2 e para a agregação por candidato o código é 2\n\neldepfed_2511 <- get_elections(year=2014, position=6, regional_aggregation=2, political_aggregation=2, candidate_number=2511)\nView(eldepfed_2511)\n\n\n## 2.5. Consultar bens de candidatos ---------------------------------------\n\n# Para obter detalhes a respeito dos bens declarados pelos candidatos em uma eleição\n# específica, a função get_assets é a indicada:\n\nbens_14 <- get_assets(year=2014)\nView(bens_14)\n\n# Nesta função, o único parâmetro obrigatório é YEAR, mas também é possível fazer uso \n# de outros dois parâmetros opcionais, STATE e COLUMNS_LIST:\n\nbens_10_AC <- get_assets(year = 2010, state = \"AC\", columns_list = list('CODIGO_CARGO','NOME_CANDIDATO','CPF_CANDIDATO','VALOR_BEM'))\nView(bens_10_AC)\n\n\n## 2.6. Consultar a lista de secretários estaduais ---------------------------------\n\n# Para obter detalhes sobre as características individuais dos secretrários estaduais\n# entre 1995 e 2010, a função get_secretaries é a indicada:\n\nsecret_SP <- get_secretaries(state = \"SP\", name = \"João\")\nView(secret_SP)\n\n\n## 2.7. Consultar a lista de filiados --------------------------------------\n\n# Para obter informações sobre os filiados de um determinado partido, a\n# função get_filiates é a indicada:\n\nfili_MG_PT <- get_filiates(state = \"MG\", party = \"PT\")\nView(fili_MG_PT)\n\n# 3. Selecionando apenas as colunas que me interessam ---------------------\n\n# As funções do CepespR retornam todas as colunas disponíveis, mas é possivel limitar \n# o tamanho dos resultados selecionando apenas as colunas de interesse. Veja:\n\n## PASSO 1: Primeiro visualizamos quais são as colunas padrões através da função NAMES. Veja:\n\n# Na função get_candidates,por exemplo, as colunas padrões são:\n\nnames(get_candidates(year = 2014, position = \"Presidente\"))\n\n# Note que uma lista de 46 colunas apareceu no seu console. E para as outras funções?\n\nnames(get_coalitions(year = 2014, position = \"Presidente\"))#Lista as colunas da função get_coalition\n\nnames(get_votes(year = 2014, position = \"Presidente\"))#Lista as colunas da função get_votes\n\nnames(get_elections(year = 2014, position = \"Presidente\"))#Lista as colunas da função get_elections\n\n## PASSO 2: Em segundo, criamos uma lista com o nome das colunas que desejamos: \n\n# Se queremos analisar os dados referentes aos votos, por exemplo, poderíamos\n# reduzir nosso data frame a seguintes colunas:\n\ncolunas <- list(\"NUMERO_CANDIDATO\", \"UF\", \"QTDE_VOTOS\", \"COD_MUN_IBGE\")\n\n## PASSO 3: Acrescentamos o parâmetro columns_list a nossa função e indicamos a lista criada com o nome das colunas:\n\nvtpres_14_new <- get_votes(year=\"2014\", position=\"Presidente\", regional_aggregation=\"Municipio\", columns_list=colunas)\nView(vtpres_14_new)\n\n# Outra maneira de selecionar as colunas de interesse é através da função SUBSET. Para isto, basta:\n\nelpres_14_ <- subset(elpres_14_2,select= c(\"ANO_ELEICAO\", \"QT_VOTOS_BRANCOS\", \"QT_VOTOS_NULOS\"))\nView(elpres_14_)\n\n# Note que a função foi escrita na seguinte ordem: nome do novo data frame+subset+nome do antigo data frame+\n# nome das colunas de interesse\n\n\n# 4. Analisando os resultados ---------------------------------------------\n\n# É possível fazer análises descritivas das variáveis contidas nos data frames. Por exemplo:\n# Para variáveis qualitativas (categóricas), podemos usar a função TABLE. Esta função retorna a distribuição de frequência absoluta\n# das categorias. Veja:\n\n# Suponhamos que estamos interessados na quantidade de candidatas do sexo feminino para as eleições a prefeito de 2016.\n# A função abaixo retorna a frequência absoluta de homens e mulheres:\n\nelpref_16 <- get_elections(year=2016, position=\"Prefeito\", regional_aggregation=\"Municipio\", political_aggregation=\"Candidato\")\ntable(elpref_16$DESCRICAO_SEXO)\n\n# Note que a função foi escrita assim: table(nome do data frame$variável do data frame em que estou interessado)\n\n# E para as eleições a deputado federal em 2014? Quantas mulheres se candidataram neste ano? Veja:\n\neldepfed_14 <- get_elections(year=2014, position=\"Deputado Federal\", regional_aggregation=\"Estado\", political_aggregation=\"Candidato\")\ntable(eldepfed_14$DESCRICAO_SEXO)\n\n# Para variáveis quantitativas (contínuas), podemos usar a função SUMMARY. Esta função retorna média, mediana, mínimo \n# e máximo das variáveis. Veja: \n\n# Suponhamos que estamos interessados na média das idades dos candidatos nas eleições a presidente de 2014. Veja:\n\nsummary(elpres_14$IDADE_DATA_ELEICAO)\n\n# Note que a função SUMMARY funciona de maneira similar a TABLE:\n# summary(nome do data frame$variável do data frame em que estou interessado)\n\n\n# 5. Salvando os resultados -----------------------------------------------\n\n# Para salvar os data frames gerados neste script em formato .csv, basta usar a função abaixo:\n\n# A função está organizada da seguinte maneira:\n# write.csv2(nome do data frame que quero exportar, nome que quero dar ao meu arquivo .csv)\n\nwrite.csv2(elpres_14, \"eleicoes_presidente_2014.csv\")\n",
    "created" : 1560953844416.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "285264632",
    "id" : "8D4F2012",
    "lastKnownWriteTime" : 1560957298,
    "last_content_update" : 1560957298882,
    "path" : "~/GitHub/workshopR/script_workshop.R",
    "project_path" : "script_workshop.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}