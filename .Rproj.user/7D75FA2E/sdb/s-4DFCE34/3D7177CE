{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Guia CEPESP\"\nauthor: \"Rafael Coelho\"\ndate: \"August 9, 2018\"\noutput:\n  pdf_document: default\n  html_document: default\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE,\n                      eval = FALSE)\n```\n\nO __CepespR__ é um pacote criado para auxiliar o acesso dos usuários a API do CepespData. Por meio deste pacote é possível ter um acesso mais rápido e organizado aos dados do TSE a respeito das eleições ocorridas no Brasil entres os anos de 1998 e 2016. Pensando nisto, este script tem como seu objetivo principal mostrar exemplos de como o pacote CepespR funciona e, assim, facilitar a vida dos usuários na hora de utilizar o R. Seguindo a rotina de cógidos abaixo, o usuário ao final deste script terá as consultas realizadas salvas com sucesso em formato compatível com o excel(.csv).\n\n## 1. Instalando o CepespR\n\nPara instalar o pacote CepespR é preciso rodar o código abaixo apenas \numa vez (apenas em caso de troca de computador é preciso instalar novamente o pacote):\n\n```{r}\nif (!require(\"devtools\")) install.packages(\"devtools\")\ndevtools::install_github(\"Cepesp-Fgv/cepesp-r\") \n```\n\nUma vez instalado o CepespR, é preciso \"ativar\" a library toda vez. Por isso SEMPRE que for utilizar o CepespData, é necessário rodar o código abaixo:\n\n```{r}\nlibrary(cepespR)\n```\n\n## 2. Explorando as funções do CepespR\n\nUma vez carregado o pacote do CepespR, o usuário poderá fazer uso de 7 tipos de funções: `get_candidates`, `get_coalitions`, `get_votes`,  `get_elections`, `get_assets`, `get_secretaries` e `get_filiates`. Cada função mostra ao usuário diferentes partes dos dados do TSE, retornando sempre ao final da consulta uma tabela com os detalhes das eleições. Veja abaixo o que cada função faz:\n\n\n### 2.1. Consultar perfil dos candidatos (get_candidates)\n\nPara obter detalhes a respeito das características individuais dos candidatos que concorreram em uma eleição específica, a função get_candidates é a indicada: A função funciona assim: base_de_dados<-get_candidates(year= \"Ano escolhido\", position = \"cargo escolhido\"). Como no exemplo abaixo:\n\n```{r}\ncandpres_14 <- get_candidates(year=2014, position=\"Presidente\")\n```\n\nPara visualizar os dados do data frame criado usamos a função VIEW\n\n```{r}\nView(candpres_14)\n```\n\n\nA ordem da função é sempre esta: nome do data frame onde você quer salvar estas informações + nome da função + variáveis de interesse. Também é possível realizar as consultas indicando os códigos dos cargos. Para visualizar quais códigos representam cada cargo, por favor, acesse: https://github.com/Cepesp-Fgv/cepesp-rest/blob/master/EleicoesPorCargo_BETA.md\n\nVamos fazer uma consulta usando o código do cargo:\n\nSuponhamos que estamos interessados nas eleições para prefeito ocorridas em 2012. Neste caso, é preciso mudar apenas os valores dos parâmetros da função. Veja:\n\n```{r}\ncandpref_12 <- get_candidates(year=2012, position=11)\n```\n\nVocê também poderia ter escrito \"Prefeito\" no lugar do código 11, que o resultado seria o mesmo. Note que apenas o ano e o nome(código) do cargo foram alterados\n\n```{r}\nView(candpref_12)\n```\n\n### 2.2. Consultar Coligações\n\nPara obter detalhes a respeito dos partidos que compuseram as coligacões em uma eleição específica, a função get_coalitions é a indicada:\n\nEla funciona de forma similar a get_candidates:\n\n```{r}\ncolpres_14 <- get_coalitions(year=2014, position=\"Presidente\")\n\nView(colpres_14)\n```\n\n\nSuponhamos que agora estamos interessados nas coligações da eleição para presidente em 2002. Neste caso, a função será escrita assim:\n\n```{r}\ncolpres_02 <- get_coalitions(year=2002, position=\"Presidente\")\n\nView(colpres_02)\n```\n\n### 2.3. Consultar votos por eleição\n\nPara obter detalhes a respeito do número de votos de cada candidato em uma eleição específica, a função get_votos é a indicada:\n\n```{r}\nvtpres_14_mun <- get_votes(year=2014, position=\"Presidente\", regional_aggregation=\"Municipio\")\n\nView(vtpres_14_mun)\n```\n\n\nDiferente das funções anteriores, essa função precisa de uma AGREGAÇÃO REGIONAL. Ou seja, você pode escolher a que nível de detalhe você quer ver os dados, se é por seção, municipio, nacional, etc. Os diferentes níveis de agregação disponíveis podem ser consultados em: https://github.com/Cepesp-Fgv/cepesp-r\n\nE se estivéssemos interessados em ver a agregação por Estado (unidade da federação)?\n\n```{r}\nvtpres_14_estad <- get_votes(year=2014, position=\"Presidente\", regional_aggregation=\"Estado\")\nView(vtpres_14_estad)\n```\n\n### 2.4. Consultar resultado de eleições por cargo\n\nAlém das consultas disponíveis no TSE, é possível fazer uma consulta integrada as eleições. Esta consulta agrega informações de candidato, coligações e votos. A consulta ainda está em fase BETA e podem haver pontos de melhoria. Para obter detalhes a respeito de uma eleição especificando-se o cargo, use a função get_elections:\n\n```{r}\nelpres_14 <- get_elections(year=2014, position=\"Presidente\", regional_aggregation=\"Municipio\", political_aggregation=\"Candidato\")\n\nView(elpres_14)\n```\n\nEsta função permite também consultar o resultado por diferentes agregações: \n\n- Candidato.\n\n- Partido.\n\n- Coligação.\n\n- Consolidado.\n\nEm resultado consolidado da eleição você pode encontrar dados de comparecimento, votos válidos e votos brancos e nulos. Veja:\n\n```{r}\nelpres_14_2 <- get_elections(year=2014, position=\"Presidente\", regional_aggregation=\"Estado\", political_aggregation=\"Consolidado\")\n\nView(elpres_14_2)\n```\n\nCaso você queira restringir sua busca, é possível filtrar na consulta valores específicos. Para limitar os resultados a valores específicos (um estado, um partido ou a um candidato, por exemplo), basta acrescentar os parâmetros STATE, PARTY ou CANDIDATE_NUMBER e alterá-los de acordo com o interesse.\n\nPara mostrar apenas os resultados do Rio Grande do Sul, por exemplo, acrescente o parâmetro STATE\n\n```{r}\nelpres_14_RS <- get_elections(year=2014, position=\"Presidente\", regional_aggregation=\"Estado\", political_aggregation=\"Partido\", state=\"RS\")\n\nView(elpres_14_RS)\n```\n\nPara mostrar apenas os resultados referentes ao PT, por exemplo, acrescente o parâmetro PARTY\n\n```{r}\nelpres_14_PT <- get_elections(year=2014, position=\"Presidente\", regional_aggregation=\"Estado\", political_aggregation=\"Partido\", party=\"13\")\n\nView(elpres_14_PT)\n```\n\nPara mostrar apenas os resultados referentes ao candidato 2511, por exemplo, acrescente o parâmetro CANDIDATE_NUMBER. Vamos escrever os parâmetros usando os códigos. Para o cargo de deputado federal o código é 6, para a agregação por UF. O código é 2 e para a agregação por candidato o código é 2\n\n```{r}\neldepfed_2511 <- get_elections(year=2014, position=6, regional_aggregation=2, political_aggregation=2, candidate_number=2511)\n\nView(eldepfed_2511)\n```\n\n### 2.5. Consultar bens de candidatos\n\nPara obter detalhes a respeito dos bens declarados pelos candidatos em uma eleição específica, a função get_assets é a indicada:\n```{r}\nbens_14 <- get_assets(year=2014)\nView(bens_14)\n```\n\nNesta função, o único parâmetro obrigatório é YEAR, mas também é possível fazer uso de outros dois parâmetros opcionais, STATE e COLUMNS_LIST:\n\n```{r}\nbens_10_AC <- get_assets(year = 2010, state = \"AC\", columns_list = list('CODIGO_CARGO','NOME_CANDIDATO','CPF_CANDIDATO','VALOR_BEM'))\nView(bens_10_AC)\n```\n\n### 2.6. Consultar a lista de secretários estaduais\n\nPara obter detalhes sobre as características individuais dos secretrários estaduais entre 1995 e 2010, a função get_secretaries é a indicada:\n\n```{r}\nsecret_SP <- get_secretaries(state = \"SP\", name = \"João\")\nView(secret_SP)\n```\n\n\n### 2.7. Consultar a lista de filiados\n\nPara obter informações sobre os filiados de um determinado partido, a função get_filiates é a indicada:\n\n```{r}\nfili_MG_PT <- get_filiates(state = \"MG\", party = \"PT\")\nView(fili_MG_PT)\n```\n\n\n## 3. Selecionando colunas\n\nAs funções do CepespR retornam todas as colunas disponíveis, mas é possivel limitar o tamanho dos resultados selecionando apenas as colunas de interesse. Veja:\n\n- PASSO 1: Primeiro visualizamos quais são as colunas padrões através da função NAMES. Veja:\n\nNa função get_candidates,por exemplo, as colunas padrões são:\n\n```{r}\nnames(get_candidates(year = 2014, position = \"Presidente\"))\n```\n\nNote que uma lista de 46 colunas apareceu no seu console. E para as outras funções?\n\n```{r}\n#Lista as colunas da função get_coalition\nnames(get_coalitions(year = 2014, position = \"Presidente\"))\n\n#Lista as colunas da função get_votes\nnames(get_votes(year = 2014, position = \"Presidente\"))\n\n#Lista as colunas da função get_elections\nnames(get_elections(year = 2014, position = \"Presidente\"))\n```\n\n- PASSO 2: Em segundo, criamos uma lista com o nome das colunas que desejamos: \n\nSe queremos analisar os dados referentes aos votos, por exemplo, poderíamos reduzir nosso data frame a seguintes colunas:\n\n```{r}\ncolunas <- list(\"NUMERO_CANDIDATO\", \"UF\", \"QTDE_VOTOS\", \"COD_MUN_IBGE\")\n```\n\n- PASSO 3: Acrescentamos o parâmetro columns_list a nossa função e indicamos a lista criada com o nome das colunas:\n\n```{r}\nvtpres_14_new <- get_votes(year=\"2014\", position=\"Presidente\", regional_aggregation=\"Municipio\", columns_list=colunas)\n\nView(vtpres_14_new)\n```\n\nOutra maneira de selecionar as colunas de interesse é através da função SUBSET. Para isto, basta:\n\n```{r}\nelpres_14_ <- subset(elpres_14_2,select= c(\"ANO_ELEICAO\", \"QT_VOTOS_BRANCOS\", \"QT_VOTOS_NULOS\"))\n\nView(elpres_14_)\n```\n\nNote que a função foi escrita na seguinte ordem: nome do novo data frame+subset+nome do antigo data frame+\nnome das colunas de interesse\n\n\n## 4. Analisando os resultados\n\nÉ possível fazer análises descritivas das variáveis contidas nos data frames. Por exemplo: \n\nPara variáveis qualitativas (categóricas), podemos usar a função TABLE. Esta função retorna a distribuição de frequência absoluta das categorias. Veja:\n\nSuponhamos que estamos interessados na quantidade de candidatas do sexo feminino para as eleições a prefeito de 2016.\nA função abaixo retorna a frequência absoluta de homens e mulheres:\n\n```{r}\nelpref_16 <- get_elections(year=2016, position=\"Prefeito\", regional_aggregation=\"Municipio\", political_aggregation=\"Candidato\")\n\ntable(elpref_16$DESCRICAO_SEXO)\n```\n\nNote que a função foi escrita assim: table(nome do data frame$variável do data frame em que estou interessado). E para as eleições a deputado federal em 2014? Quantas mulheres se candidataram neste ano? Veja:\n\n```{r}\neldepfed_14 <- get_elections(year=2014, position=\"Deputado Federal\", regional_aggregation=\"Estado\", political_aggregation=\"Candidato\")\n\ntable(eldepfed_14$DESCRICAO_SEXO)\n```\n\nPara variáveis quantitativas (contínuas), podemos usar a função SUMMARY. Esta função retorna média, mediana, mínimo e máximo das variáveis. Veja: \n\nSuponhamos que estamos interessados na média das idades dos candidatos nas eleições a presidente de 2014. Veja:\n\n```{r}\nsummary(elpres_14$IDADE_DATA_ELEICAO)\n```\n\nNote que a função `summary` funciona de maneira similar a `table`: `summary` (nome do data frame$variável do data frame em que estou interessado).\n\n## 5. Salvando os resultados\n\nPara salvar os data frames gerados neste script em formato .csv, basta usar a função abaixo:\n\nA função está organizada da seguinte maneira: `write.csv2`(nome do data frame que quero exportar, nome que quero dar ao meu arquivo .csv)\n\n```{r}\nwrite.csv2(elpres_14, \"eleicoes_presidente_2014.csv\")\n```\n\n",
    "created" : 1560956892418.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3852812719",
    "id" : "3D7177CE",
    "lastKnownWriteTime" : 1560957448,
    "last_content_update" : 1560957448576,
    "path" : "~/GitHub/workshopR/workshop.Rmd",
    "project_path" : "workshop.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}